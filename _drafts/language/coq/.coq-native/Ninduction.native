open Nativevalues
open Nativecode
open Nativelib
open Nativeconv
open Declaremods
let symbols_tbl =
  get_library_symbols_tbl
  (str_decode "8495a6be0000000c000000020000000700000006a029696e64756374696f6e40")

(* Time spent generating this code: 0.00000s *)
let const_Ninduction_plus_n_O =
  mk_constant_accu (get_const symbols_tbl 0)

let const_Ninduction_minus_diag =
  mk_constant_accu (get_const symbols_tbl 1)

let const_Ninduction_mult_O_r =
  mk_constant_accu (get_const symbols_tbl 2)

let const_Ninduction_plus_n_Sm =
  mk_constant_accu (get_const symbols_tbl 3)

let const_Ninduction_plus_comm =
  mk_constant_accu (get_const symbols_tbl 4)

let const_Ninduction_plus_assoc =
  mk_constant_accu (get_const symbols_tbl 5)

let fixtype_double_0  =
  [|mk_prod_accu
    (get_name symbols_tbl 6) Nnat.indaccu_Nnat_nat_0 ((fun (x_n_0 : Nativevalues.t)
                                                      ->
                                                       Nnat.indaccu_Nnat_nat_0))|]

let pred_double_0 (x_n_3 : Nativevalues.t) =
  Nnat.indaccu_Nnat_nat_0

(* Hash = -90064968406432612 *)
let rec case_double_0  (x_double_6 : Nativevalues.t) (x_anonymous_4 : Nativevalues.t) =
  begin match Obj.magic (x_anonymous_4) with
  | Nnat.Accu_Nnat_nat_0 _ ->
    mk_sw_accu
    (get_match symbols_tbl 7) (cast_accu x_anonymous_4) (pred_double_0 ) (
    case_double_0 x_double_6)
  | Nnat.Construct_Nnat_nat_0_0  ->
    (Obj.magic (Nnat.Construct_Nnat_nat_0_0) : Nativevalues.t)
  | Nnat.Construct_Nnat_nat_0_1 x_n'_5  ->
    (Obj.magic (Nnat.Construct_Nnat_nat_0_1 ((Obj.magic (Nnat.Construct_Nnat_nat_0_1 (
                                             x_double_6 x_n'_5)) : Nativevalues.t))) : Nativevalues.t)
  end

let norm_double_0 (x_double_1 : Nativevalues.t) (x_n_2 : Nativevalues.t) =
  case_double_0 x_double_1 x_n_2

let normtbl_double_0  =
  [|norm_double_0|]

let const_Ninduction_double =
  let rec x_double_7 (x_n_2 : Nativevalues.t) =
    (if is_accu x_n_2 then
      mk_fix_accu [| 0 |] 0 (fixtype_double_0 ) (normtbl_double_0 ) x_n_2
    else
      begin match Obj.magic (x_n_2) with
      | Nnat.Accu_Nnat_nat_0 _ ->
        mk_sw_accu
        (get_match symbols_tbl 7) (cast_accu x_n_2) (pred_double_0 ) (
        case_double_0 x_double_7)
      | Nnat.Construct_Nnat_nat_0_0  ->
        (Obj.magic (Nnat.Construct_Nnat_nat_0_0) : Nativevalues.t)
      | Nnat.Construct_Nnat_nat_0_1 x_n'_5  ->
        (Obj.magic (Nnat.Construct_Nnat_nat_0_1 ((Obj.magic (Nnat.Construct_Nnat_nat_0_1 (
                                                 x_double_7 x_n'_5)) : Nativevalues.t))) : Nativevalues.t)
      end)
  in
  x_double_7

let const_Ninduction_double_plus =
  mk_constant_accu (get_const symbols_tbl 8)

