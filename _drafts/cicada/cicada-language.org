#+TITLE:  cicada language
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* 待
** 擬定更具體的實現計劃
** 交叉匯編器構架
** vm 與 匯編器的設計
** cicada-language 到 vm 的匯編語言的編譯器
* 引
  * 想要增加一個 留下數據語言
  * 在 小蟬語中
    使用了 taca 來做 尾調用優化
  * 然後如何
    是不是應該把 小蟬語 直接改制成一個 留下數據語言
    以減少層次
  * 也就是說
    所實現的第一個線串碼解釋器
    是專門爲了實現第二個語言而做的
    而不再是一個通用的語言
    這樣
    就第一個語言而言
    其語法的詳細性[explicit]
    就是可以接受的了
  * byte buffer editor
    bit buffer editor
    * cursor = 1 cursor = c1s
    * buffer = 2 cursor = c2s
    * xxxxxx = 3 cursor = c3s
* 交叉匯編器框架
  * cross assembler framework
    like line editor
    with modes
  * hash-table for naming
    各種 ?
  * 目的 爲了寫 cicada-language 的 VM 的 匯編器
* 宿主語言與蟬語的關係
  * 如果以 小蟬語爲宿主語言
    那麼兩者時間的關係就十分微妙了
  * 首先
    可移植性重新由小蟬語的亦實現性來維護
    虛擬機的設計可以更複雜了
    也許 gc 可以被放入虛擬機當中
  * 這樣看似纔是正確的實現方式
    因爲此時的移植更簡單了
    因爲 小蟬語 比之前設計的 VM 還要簡單
  * 實現技術可以圖示如下
    #+begin_src return-stack
    - (machine) - (cicada-nymph)
    - (assembler) & (vm) - (cicada-language)
    #+end_src
  * 其中 (cicada-language)
    將是用各種語言實現的 cicada-language 到
    vm 的匯編語言的編譯器
  * 而 (vm) 是實現與 cicada-nymph 中的一個性能更豐富的
    對底層機器的特殊屬性依賴很弱的線串碼解釋器
  * (assembler) 是以 cicada-nymph 所提供的
    交叉匯編器框架爲基礎的
* 小蟬語可能需要爲此特殊目的改進之處
  * 爲優化做準本
  * 命名機制規則可以 更加形式化 更加嚴格
* 計劃
  * 由於 前一個版本的 vm 的經歷
    我現在對系統整體有了更好的認識
    重新設計之決策是
    建立在對之前版本的反思之上的
    那麼
    重新設計之具體計劃也應該
    建立在對之前版本的反思之上
  * 也就是說
    這次的系統的整個設計將是從上到下的
    我將嘗試線把全局的屬性設計好
    然後在進行具體的編碼工作
  * vm 的設計基本定型了
    所以
    這次的實現順序將是
    1. 匯編語言和編譯器
    2. 匯編器框架
    3. vm 的實現
* 記
** 基本輸入
   * 也許需要把基本輸入改成 編譯然後立即執行
* 對之前 vm 的更具體的反思
** 記
   * 邊反思 邊作出新的設計
     注意
     已經 決定要將 GC 實現在 vm 中了
     所以很多原本缺少正規性的地方都可以簡化
   * 而雙向鏈接的鏈表
     還有對鏈表的複製就是需要提前考慮的了
** 編譯器
   * 之前的編譯器
     具有所謂的 臨時性
     其實就是我不想用別的語言寫程序
     而對現在的小蟬語而言情況不同了
** 文件類型
   * 匯編文件 用 iaa
     蟬語源碼 用 ccd
** vm 構架
   * gc 被搬到 vm 中來
     這樣 就可以避免某些嫁接機制
     而獲得更專一的設計
   * 尤其是關於類型系統
     因爲有了鏈表這個數據結構可以使用
     我就能編碼複雜的數據類型了
     這樣就很容易獲得一個完整的類型推導
