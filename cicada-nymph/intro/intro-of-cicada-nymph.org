#+TITLE:  小蟬語引 / intro-of-cicada-nymph
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* ===================================
* 源碼
  * [[https://github.com/the-little-language-designer/cicada][託管在 github 上的 主要代碼庫]]
  * 在網頁上瀏覽源代碼
    1. 匯編代碼
       [[../show-all.html][cicada-nymph.org]]
       [[../tangled/show-all.html][cicada-nymph.cn]]
    2. 小蟬語代碼
       [[../core/show-all.html][core.org]]
       [[../core/tangled/show-all.html][core.cn]]
* 題解
  * 名爲小蟬語
    是因爲
    我起初爲了教學目的而實現這個程序語言
    而其設計來源於 我所設計的
    名爲 蟬語 的程序語言之早期版本
  * 我從頭開始寫
    由在之前的幾次設計中所積累的經驗
    我得以簡化代碼
    並使其結構更清晰
  * 我把實現中的每個關鍵步驟凝結成
    可以獨立工作的程序
    並且用一些簡單測試
    來展示每個關鍵步驟中所實現的性狀
    我把它們稱作 齡一 齡二 等等
    就像是蟬的幼蟲的年齡
    你可以從第一個的代碼開始看起
    逐步學習解釋器的實現方式
    * [[../1st-instar/overview.html][齡一]]
      * 基本的線串碼解釋器
    * [[../2nd-instar/overview.html][齡二]]
      * 線串碼中的基本指令
    * [[../3rd-instar/overview.html][齡三]]
      * 基本輸入輸出
      * 轉跳指令
    * [[../4th-instar/overview.html][齡四]]
      * 基本 REPL
    * [[../5th-instar/overview.html][齡五]]
      * [[../5th-instar/core/overview.html][被加載的核文件]]
      * 編譯器
      * 對文件的加載
    * [[../overview.html][進行中的小蟬語]]
      * [[../core/overview.html][被加載的核文件]]
      * 局部變元
      * 另外
        在進行的版本中
        還有對性狀的一些豐富與補充
        使得 小蟬語 在教學目的之外
        也能勝於其他任務
  * 通過這種方式
    並補充以
    計算機構架 和 匯編語言的基本知識
    我得以
    以這個簡單的程序語言的實現爲基礎
    來講授 [[../course/overview.html][匯編語言課程的實驗課]]
* 運行
  * [[https://github.com/the-little-language-designer/cicada][請到這裏下載源代碼]]
    並依照指示編譯解釋器
* 簡單的例子
** 執行函數
   #+begin_src cicada-nymph
   << 計算 3 與 4 的和 並打印出結果 >>
   3 4 add .

   3    << 將 3 入棧 >>
   4    << 將 4 入棧 >>
   add  << 將棧中兩數取出並相加 把計算結果放回棧中 >>
   .    << 打印出棧頂數值 >>


   << 計算 4 的平方 並打印出結果 >>
   4 dup mul .

   4    << 將 4 入棧 >>
   dup  << 將棧頂元素複製 >>
   mul  << 將棧中兩數取出並相乘 把計算結果放回棧中 >>
   .    << 打印出棧頂數值 >>
   #+end_src
** 定義函數
   #+begin_src cicada-nymph
   << 定義一個函數 以計算平方 >>
   : square
     << number -- number >>
     << 上面的一行註釋代表
        這個函數
        取棧中的一個數作爲參數
        並返回一個數到棧中 >>
     dup mul
     end
   ; define-function

   << 計算 4 的平方 並打印出結果 >>
   4 square .
   #+end_src
** 遞歸函數
   #+begin_src cicada-nymph
   << 定義階乘函數 >>
   : factorial
     << number -- number >>
     dup one? if
       end
     then
     dup sub1 factorial
     mul
     end
   ; define-function

   << 計算 4 的階乘 並打印出結果 >>
   4 factorial .

   << 計算 4 的階乘 並打印出結果 >>
   4 3 2 1 mul mul mul .
   #+end_src
* ===================================
* source code
  * [[https://github.com/the-little-language-designer/cicada][main repo of cicada language on github]]
  * view the source code on web
    1. assembly code
       [[../show-all.html][cicada-nymph.org]]
       [[../tangled/show-all.html][cicada-nymph.cn]]
    2. cicada-nymph code
       [[../core/show-all.html][core.org]]
       [[../core/tangled/show-all.html][core.cn]]
* to explain the title
  * the name of the language is cicada-nymph
    because it is implemented for teaching purpose at first
    and the design is based on
    the early version of cicada-language
  * I rewrite it
    and due to the experiences that I gained
    from previous implementations
    I am able to simplify the code
    and make its structure much more clear
  * then
    from each major steps of the development
    I do abstract
    to form an independently working program
    and equip it with simple test
    to demonstrate the feature that got implemented
    from that specific step of development
    * [[../1st-instar/overview.html][1st-instar]]
      * the threaded code interpreter
    * [[../2nd-instar/overview.html][2nd-instar]]
      * basic instructions of threaded code
    * [[../3rd-instar/overview.html][3rd-instar]]
      * basic io
      * instructions about branching
    * [[../4th-instar/overview.html][4th-instar]]
      * basic REPL
    * [[../5th-instar/overview.html][5th-instar]]
      * [[../5th-instar/core/overview.html][core file to load]]
      * compiler
      * load-file
    * [[../overview.html][the ongoing cicada-nymph]]
      * [[../core/overview.html][core file to load]]
      * local-variable
      * and to add more features
        to let cicada-nymph be fit for missions other than teaching
  * thus
    I am able to use the implementation of this simple language
    to teach an [[../course/overview.html][experimental assembly course]]
    (currently Chinese version only
     I will translate it to English when needed)
* to run
  * [[https://github.com/the-little-language-designer/cicada][please visit this repository to download the source code]]
    and follow the instructions there
    to compile the interpreter
* simple examples
** function application
   #+begin_src cicada-nymph
   << calculate the sum of 3 & 4 and print the result >>
   3 4 add .

   3    << push 3 to stack >>
   4    << push 4 to stack >>
   mul  << take the top two numbers off the stack
           add them
           and push the result back onto the stack >>
   .    << print the value at the top of the stack >>


   << calculate the square of 4 and print the result >>
   4 dup mul .

   4    << push 4 to stack >>
   dup  << duplicate the value at the top of the stack >>
   mul  << take the top two numbers off the stack
           multiple them
           and push the result back onto the stack >>
   .    << print the value at the top of the stack >>
   #+end_src
** function definition
   #+begin_src cicada-nymph
   << define a function to calculate square >>
   : square
     << number -- number >>
     << the above comment denotes that
        the function defined here will
        take one number as argument from the stack
        return one number as return value back to the stack >>
     dup mul
     end
   ; define-function

   << calculate the sum of 3 & 4 and print the result >>
   4 square .
   #+end_src
** recursive function
   #+begin_src cicada-nymph
   : factorial
     << number -- number >>
     dup one? if
       end
     then
     dup sub1 factorial
     mul
     end
   ; define-function

   << calculate the factorial of 4 and print the result >>
   4 factorial .

   << calculate the factorial of 4 and print the result >>
   4 3 2 1 mul mul mul .
   #+end_src
* ===================================
