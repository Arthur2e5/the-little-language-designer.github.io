#+TITLE:  匯編 / assembly
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* 棧
  * cicada 中使用棧的約定是
    1. 指針指向 current-free-address
    2. push 時 指針的值增加
    3. 兩個棧 兩個指針
       以實現 參數傳遞 與 函數調用
  * x86 中使用棧的約定是
    1. 指針指向 last-pushed-content
       [這是一種設計失誤 因爲它把空的棧變成了一種特殊情況]
    2. push 時 指針的值減小
       [這是一種設計失誤 因爲它徒然與人們的直覺相違背]
    3. 一個棧 兩個指針
       以實現 參數傳遞 與 函數調用
       一個專門用來找到 stack 中的 return-address
       因爲 return-address 將要被夾在 argument 和 local variable 之間
       所以 需要一個機制來找打它的位置
       [這是一種設計失誤 因爲它引入了不必要的技巧]
    4. http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/
    5. http://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/
* 匯編語言作爲特殊的程序語言
  * 通常把匯編語言理解爲指令編碼的助記符
    但是其實
    也可以把匯編語言理解爲
    在輸出文件裏 以相對線性的方式 去遺留數據 的語言
    尤其是對於 fasm 來說更是如此
  * 某些重要的 directive 的作用這是如此
